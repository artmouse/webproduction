<h1>Как правильно писать миграции (обновления) OneBox</h1>

Миграции - это короткие (или не сильно) скрипты, которые конвертируют данные при прыжке
системы <strong>с версии на версию</strong>.<br />
<br />

Например, в каком-то коммите изменилась структура базы, значит нужно сделать миграцию, чтобы при обновлении
у остальных пользователей и разработчиков было все ок.<br />
<br />

<h2>Что такое миграции в OneBox?</h2>

<strong>В OneBox миграции это скрипты updater и сам скрипт updater.sh.</strong>
Это файл updater.sh и директория /updater/ вместе со скриптами:<br />
<br />

<code><pre>
100-test.php
101-test.php
17065-fvc.php
17618-user-to-employee.php
17719-order-sumbase.php
21401-order-type.php
23317-fvc-dropindex.php
24944-user-email-phone.php
25305-box-sync-linkkey-bug.php
25907-pricesell.php
26350-supplier.php
26368-order-type.php
...
</pre></code>
<br />

<h2>Как работают миграции?</h2>
Например, вы находитесь на версии 100 и хотите обновиться.<br />
При запуске updater.sh найдет все файлы от 100 и выше и запустит их по очереди.<br />
<br />

<h2>Какая структура скриптов в директории /updater/?</h2>

Это обычный php-скрипт, в котором уже подключен весь движок и API, все нужные пакеты.<br />
Вы просто пишете кусок конвертационного кода и все.<br />
<br />

<code><pre>
// всем пользователям, у которых level>=2 проставить employer=1
$users = Shop::Get()->getUserService()->getUsersAll();
$users->setEmployer(0);
$users->addWhere('level', '1', '>');
while ($x = $users->getNext()) {
    print "set employer #".$x->getId()."\n";

    $x->setEmployer(1);
    $x->update();
}
</pre></code>

<br />

<h2>В каких случаях нужно писать миграции?</h2>
Во всех случаях, когда у вас меняется структура базы, структура хранения данных или архитектура системы.
Во всех случаях, когда после обновления системы на ваш новый коммит что-то перестанет
работать или слелит (например настройки).<br />
<strong>А перестать работать не должно.</strong><br />