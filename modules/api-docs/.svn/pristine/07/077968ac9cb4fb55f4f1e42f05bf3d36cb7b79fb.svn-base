<h1>Типы пакетов packages</h1>

Терминология: packages, они же пакеты, они же wpp или #wpp (WebProduction Packages).
<br />
<br />

Пакеты хранятся в репозитории https://svn.webproduction.ua/wpp/ и подтягиваюся в проект shop через svn:externals.<br />
Наберите команду в корне проекта shop.localhost чтобы понять что такое пакеты:<br />
svn pedit svn:externals .<br />
<br />

В зависимости от имени пакетов - вы можете понять что они примерно делают.
<br />
<br />

<h2>API-пакеты</h2>
Если пакет называется xxxAPI, то это означает, что пакет предоставляет
только программное API без какой-либо подсистемы рендеринга страниц.<br />
<br />

Как правило, такой пакет будет реализован как по паттерну
Singleton (одиночка), то есть доступ ко всем методам пакета будет
доступен примерно так:<br />
<br />

<code><pre>
xxxAPI::Get()->method(...);
</pre></code>
<br />
<br />

Иными словами, такие пакеты - это чистое API: сервисы, x-классы,
системные классы, логика. Но никак не отображение.<br />
<br />

<h2>Пакеты-расширения</h2>
По названию пакетов не сложно догадаться, что есть пакеты-расширения.<br />
<br />

Например, EngineAJAX, EngineDebug - сильно зависят от Engine и
прямиком расширяют его.<br />
Яркие примеры пакетов-расширений: EngineBlog, EngineStore, EngineTextPages, ...<br />
<br />

Но не стоит путать пакеты-расширения и пакеты, основанные на
фундаменте другого пакета.<br />
Например, JSScriptAculoUs основан на JSPrototype, но в названии нет
"JSPrototype".<br />
<br />

Также, существуют пакеты, у которых в самом названии уже есть названия
других пакетов.<br />
Например, JSPrototypeCalendar - он так и называется в оригинале,
его так назвал автор.<br />
<br />

<h2>Engine-пакеты (частный случай пакетов-расширений) (устаревшие)</h2>
Если пакет является расширением к Engine, то он будет называться EngineXxx
(начинаться на Engine). Яркий пример таких пакетов: EngineDebug, EngineAJAX,
EngineTextPages, ...
<br />
<br />

В случае, если в имени пакета нет явного намека на Engine, пакет без вызова
MyPackageName::Initialize() не может подключать Engine автоматически
какие-либо Eventы/Listener'ы.
<br />
<br />

<h2>Service-пакеты (устаревшие)</h2>
Если имя пакет заканчивается на Service, то это как правило устаревший пакет,
пакеты с таким именем не создаются и не поддерживаются после 2011.05 (May, 2011).
(Нюанс в том, что само слово Service - это только как правило только
бизнес-логика, причем заточенная исключительно под паттерн фабрика сервисов).
<br />
<br />


<h2>Utils-пакеты</h2>
Utils-пакеты - просто сборник относительно независимых классов, собранных
в один пакет.<br />
Utils-пакеты не имеют центральной точки входа (класса с именем пакета).<br />
<br />
Примеры Utils-пакетов: StringUtils.<br />
<br />

<h2>VO-пакеты (и классы в пакетах)</h2>
Существуют пакеты, в основе которых лежит паттерн Value Object (VO).
В названии таких пакетов нет аббревиатуры VO, но в них обязательно
центральным будет класс PackageName_Object, построенный по паттерну VO.
<br />
<br />

Яркими примерами VO-пакетов можно назвать: DateTime, StringUtils, Money.
Помимо центрального VO-класса в таком пакете будет большое количество
"обвеса", утилитных классов и так далее.
<br />
<br />

<h2>Processor-пакеты</h2>
В #wpp есть определенный тип пакетов, это так называемые процессоры.<br />
Как правило, они построены по схеме batch processors.<br />
В терминах ООП это смесь паттернов Facade и Action.<br />
<br />
Яркими примерами таких пакетов являются ImageProcessor и TextProcessor.<br />
Разрабочик сам определяет последовательность обработки изображений и текстов
при помощи Action'ов вышеперечисленных пакетов.<br />

Пакеты процессоры имеют четкую структуру:<br />
1. Класс по имени пакета (например, ImageProcessor).<br />
В классе есть метод process().<br />
В классе есть метод addAction($action).<br />
2. Все классы Action'ов - ImageProcessor_ActionXXX extends/implements<br />
ImageProcessor_IAction/ImageProcessor_Action.<br />
В каждом Action'e должен быть метод process(), который выполняет<br />
обработку непосредственно Action'a.<br />
<br />
<br />

<h2>JS-пакеты</h2>
Если в имени пакета встречается "JS" - то это в первую очередь указывает
на то, что пакет JavaScript-овый. В большей степени такие пакеты будут
начинаться на JS. Например, JSPrototype, JSPrototypeCalendar и т.д.<br />
<br />

Но если в имени пакета уже есть JS (например, DateJS), то в начало мы
дописывать JS не будем.<br />
<br />

Также, есть исключения, в частности, для jQuery - пакет так
и называется - jQuery.<br />
<br />

<h2>CSS-пакеты</h2>
Аналогично JS-пакетам: если в имени пакетов встречается "CSS" -
- то пакет скорее всего будет содержать средства по работе с CSS.
Например, при подключении CSSReset - подключается стиль cssreset.css,
CSSLess - добавляет поддержку less в PackageLoader, в следствии чего
для всего CSS в проекте можно применять less-синтаксис.
<br />
<br />

<h2>UI-пакеты (устаревшие)</h2>
UI-пакеты начинаются на "UI" - от User Interface. Это пакеты, которые
подключаются к Engine и PackageLoader, чтобы внести в проект некие
UI-элементы. Например, при подключении пакета UIWPP в вашем проекте
в Engine сразу будут необходимые tpl-global, tpl-404, css-стили .wpp-menu,
.wpp-footer, .wpp-header, .wpp-h1, .wpp-h2, .wpp-content, .wpp-button и т.д.
Более подробно про предоставляемые возможности описывает сама документация
по пакету (UIWPP).
<br />
<br />

Концепция UI-пакетов только разрабатывается, большая часть пакетов
проприетарна (разрабатывается под клиента и его проекты).<br />
Тем не менее, в #wpp есть понятие UI-пакеты, используя правила именования
стилей в UI-пакетах теоретически можно мгновенно менять интерфейс любого
проекта.<br />
<br />

Особенность: выше описанные UI-пакеты именно начинаются на "UI".
Если вы разрабатываете UI-пакет для какого-либо проекта, назовите его
именно UIxxx.
<br />
<br />

Не стоит путать "свои" UI-пакеты с такими пакетами как jQueryUI,
JSPrototypeUI, которые являются расширением к jQuery/Prototype, и в тоже
время так и называются в авторском оригинале.
<br />
<br />